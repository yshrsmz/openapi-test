/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.codingfeline.openapi.retrofit.models


import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import kotlinx.serialization.Contextual
import java.io.IOException

/**
 * 
 *
 */
@Serializable

data class RefRefToPathLevelParameterOneofRefToOneofParameter(var actualInstance: Any? = null) {

    class CustomTypeAdapterFactory : TypeAdapterFactory {
        override fun <T> create(gson: Gson, type: TypeToken<T>): TypeAdapter<T>? {
            if (!RefRefToPathLevelParameterOneofRefToOneofParameter::class.java.isAssignableFrom(type.rawType)) {
                return null // this class only serializes 'RefRefToPathLevelParameterOneofRefToOneofParameter' and its subtypes
            }
            val elementAdapter = gson.getAdapter(JsonElement::class.java)
            val adapterkotlinString = gson.getDelegateAdapter(this, TypeToken.get(kotlin.String::class.java))
            val adapterkotlinInt = gson.getDelegateAdapter(this, TypeToken.get(kotlin.Int::class.java))

            @Suppress("UNCHECKED_CAST")
            return object : TypeAdapter<RefRefToPathLevelParameterOneofRefToOneofParameter?>() {
                @Throws(IOException::class)
                override fun write(out: JsonWriter,value: RefRefToPathLevelParameterOneofRefToOneofParameter?) {
                    if (value?.actualInstance == null) {
                        elementAdapter.write(out, null)
                        return
                    }

                    // check if the actual instance is of the type `kotlin.String`
                    if (value.actualInstance is kotlin.String) {
                        val primitive = adapterkotlinString.toJsonTree(value.actualInstance as kotlin.String?).getAsJsonPrimitive()
                        elementAdapter.write(out, primitive)
                        return
                    }
                    // check if the actual instance is of the type `kotlin.Int`
                    if (value.actualInstance is kotlin.Int) {
                        val primitive = adapterkotlinInt.toJsonTree(value.actualInstance as kotlin.Int?).getAsJsonPrimitive()
                        elementAdapter.write(out, primitive)
                        return
                    }
                    throw IOException("Failed to serialize as the type doesn't match oneOf schemas: kotlin.Int, kotlin.String")
                }

                @Throws(IOException::class)
                override fun read(jsonReader: JsonReader): RefRefToPathLevelParameterOneofRefToOneofParameter {
                    val jsonElement = elementAdapter.read(jsonReader)
                    var match = 0
                    val errorMessages = ArrayList<String>()
                    var actualAdapter: TypeAdapter<*> = elementAdapter

                    // deserialize kotlin.String
                    try {
                        // validate the JSON object to see if any exception is thrown
                        require(jsonElement.getAsJsonPrimitive().isString()) {
                            String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString())
                        }
                        actualAdapter = adapterkotlinString
                        match++
                        //log.log(Level.FINER, "Input data matches schema 'kotlin.String'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for kotlin.String failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'kotlin.String'", e)
                    }
                    // deserialize kotlin.Int
                    try {
                        // validate the JSON object to see if any exception is thrown
                        require(jsonElement.getAsJsonPrimitive().isNumber()) {
                            String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString())
                        }
                        actualAdapter = adapterkotlinInt
                        match++
                        //log.log(Level.FINER, "Input data matches schema 'kotlin.Int'")
                    } catch (e: Exception) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for kotlin.Int failed with `%s`.", e.message))
                        //log.log(Level.FINER, "Input data does not match schema 'kotlin.Int'", e)
                    }

                    if (match == 1) {
                        val ret = RefRefToPathLevelParameterOneofRefToOneofParameter()
                        ret.actualInstance = actualAdapter.fromJsonTree(jsonElement)
                        return ret
                    }

                    throw IOException(String.format("Failed deserialization for RefRefToPathLevelParameterOneofRefToOneofParameter: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
                }
            }.nullSafe() as TypeAdapter<T>
        }
    }

    companion object {
        /**
        * Validates the JSON Element and throws an exception if issues found
        *
        * @param jsonElement JSON Element
        * @throws IOException if the JSON Element is invalid with respect to RefRefToPathLevelParameterOneofRefToOneofParameter
        */
        @Throws(IOException::class)
        fun validateJsonElement(jsonElement: JsonElement?) {
            requireNotNull(jsonElement) {
                "Provided json element must not be null"
            }
            var match = 0
            val errorMessages = ArrayList<String>()
            // validate the json string with kotlin.String
            try {
                // validate the JSON object to see if any exception is thrown
                require(jsonElement.getAsJsonPrimitive().isString()) {
                    String.format("Expected json element to be of type String in the JSON string but got `%s`", jsonElement.toString())
                }
                match++
            } catch (e: Exception) {
                // Validation failed, continue
                errorMessages.add(String.format("Validation for kotlin.String failed with `%s`.", e.message))
            }
            // validate the json string with kotlin.Int
            try {
                // validate the JSON object to see if any exception is thrown
                require(jsonElement.getAsJsonPrimitive().isNumber()) {
                    String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString())
                }
                match++
            } catch (e: Exception) {
                // Validation failed, continue
                errorMessages.add(String.format("Validation for kotlin.Int failed with `%s`.", e.message))
            }

            if (match != 1) {
                throw IOException(String.format("Failed validation for RefRefToPathLevelParameterOneofRefToOneofParameter: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()))
            }
        }
    }
}
