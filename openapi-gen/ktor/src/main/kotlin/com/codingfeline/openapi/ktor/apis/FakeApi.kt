/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.codingfeline.openapi.ktor.apis

import com.codingfeline.openapi.ktor.models.CodesEnum
import com.codingfeline.openapi.ktor.models.RefRefToPathLevelParameterOneofRefToOneofParameter
import com.codingfeline.openapi.ktor.models.RefToRefParameterAnyofRefToAnyofParameter

import com.codingfeline.openapi.ktor.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class FakeApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * GET /fake/inline/schema/anyof/path1
        * 
        * 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun fakeInlineSchemaAnyofPath1Get(): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/fake/inline/schema/anyof/path1",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /fake/inline/schema/anyof/path2
        * 
        * 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun fakeInlineSchemaAnyofPath2Get(): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/fake/inline/schema/anyof/path2",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /fake/inline/schema/anyof/path3
        * 
        * 
         * @return kotlin.collections.List<kotlin.Any>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun fakeInlineSchemaAnyofPath3Get(): HttpResponse<kotlin.collections.List<kotlin.Any>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/fake/inline/schema/anyof/path3",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /fake/api/changeowner
        * op1
        * 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun op1(): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/fake/api/changeowner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /fake/api/changename
        * op2
        * 
         * @return kotlin.Any
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun op2(): HttpResponse<kotlin.Any> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/fake/api/changename",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * POST /fake/api/query/enum
        * op3
        * 
         * @param queryEnum query enum test 
         * @return void
        */
        open suspend fun op3(queryEnum: kotlin.collections.List<CodesEnum>): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            queryEnum?.apply { localVariableQuery["query_enum"] = toMultiValue(this, "multi") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/fake/api/query/enum",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /ref/ref_to_parameter
        * 
        * 
         * @param refToUuid to test ref to parameter (uuid) 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun refToRefParameter(refToUuid: java.util.UUID): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            refToUuid?.apply { localVariableHeaders["ref_to_uuid"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/ref/ref_to_parameter",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /ref/ref_to_operation_level_parameter_oneof
        * 
        * to test $ref to operation level parameters
         * @param refToAnyof to test ref to parameter (anyof) 
         * @return void
        */
        open suspend fun refToRefParameterAnyof(refToAnyof: RefToRefParameterAnyofRefToAnyofParameter): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            refToAnyof?.apply { localVariableHeaders["ref_to_anyof"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/ref/ref_to_operation_level_parameter_oneof",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /ref/ref_to_path_level_parameter_oneof
        * 
        * to test $ref to path level parameters
         * @param refToOneof to test ref to parameter (oneof) 
         * @return void
        */
        open suspend fun refToRefParameterOneof(refToOneof: RefRefToPathLevelParameterOneofRefToOneofParameter): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()
            refToOneof?.apply { localVariableHeaders["ref_to_oneof"] = this.toString() }

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/ref/ref_to_path_level_parameter_oneof",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /no_ref
        * 
        * 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun responseNoRef(): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/no_ref",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /ref/no_ref
        * 
        * 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun responseRefToNoRef(): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/ref/no_ref",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * GET /ref/ref
        * 
        * 
         * @return kotlin.String
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun responseRefToRef(): HttpResponse<kotlin.String> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/ref/ref",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
