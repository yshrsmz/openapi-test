package com.example.api

import com.codingfeline.openapikotlin.runtime.auth.OAuth2Config
import com.codingfeline.openapikotlin.runtime.auth.TokenManager
import kotlinx.coroutines.runBlocking

/**
 * Example application demonstrating usage of OpenAPI-generated code
 * 
 * This example shows how the generated OryApiClient would be used
 * with OAuth2 authentication and the runtime module.
 */
object ExampleApp {
    @JvmStatic
    fun main(args: Array<String>) {
        // Example configuration
        val config = OAuth2Config(
            authorizationEndpoint = "https://auth.example.com/oauth2/auth",
            tokenEndpoint = "https://auth.example.com/oauth2/token",
            clientId = "your-client-id",
            redirectUri = "app://callback",
            scope = "openid profile email"
        )
        
        // Token manager for storing tokens
        val tokenManager = TokenManager.InMemory()
        
        // This would be generated by the plugin
        // val client = OryApiClient.create(
        //     baseUrl = "https://api.example.com",
        //     oauth2Config = config,
        //     tokenManager = tokenManager
        // )
        
        runBlocking {
            try {
                // Example API calls using generated client
                println("Fetching current identity...")
                // val identity = client.getCurrentIdentity()
                // println("Current user: ${identity.email}")
                
                // List all identities (admin endpoint)
                // val identities = client.listIdentities(page = 1, perPage = 10)
                // identities.forEach { identity ->
                //     println("Identity: ${identity.id} - ${identity.email}")
                // }
                
                println("Example completed successfully!")
            } catch (e: Exception) {
                println("Error: ${e.message}")
                e.printStackTrace()
            }
        }
    }
}

/**
 * Example of what the generated data classes would look like
 */
data class Identity(
    val id: String,
    val email: String,
    val emailVerified: Boolean = false,
    val createdAt: kotlinx.datetime.Instant,
    val updatedAt: kotlinx.datetime.Instant,
    val metadata: Map<String, Any>? = null
)